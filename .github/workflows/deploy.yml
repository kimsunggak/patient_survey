# .github/workflows/deploy.yml

name: prototype 1 deploy to GitHub Pages

# 1) test1 브랜치에 push 될 때만 동작
on:
  push:
    branches: [test1]

# 2) 최소 권한만 부여
permissions:
  contents: read   # 코드 읽기 (actions/checkout에 필요)
  pages: write     # Pages 배포 (actions/deploy-pages에 필요)
  id-token: write  # OIDC 토큰 (actions/deploy-pages가 GitHub Pages와 안전하게 통신하는 데 필요)

jobs:
  # 3) 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      # 3-1) 리포지토리 복제
      - name: Checkout repository
        uses: actions/checkout@v4

      # 3-2) Node.js 설치 (v18)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # 3-3) web1 의존성 설치
      - name: Install web1 dependencies
        run: npm ci
        working-directory: ./web1 # web1 폴더에서 실행

      # 3-4) web1 빌드
      - name: Build web1
        run: npm run build
        working-directory: ./web1 # web1 폴더에서 실행

      # 3-5) web2 의존성 설치
      - name: Install web2 dependencies
        run: npm ci
        working-directory: ./web2 # web2 폴더에서 실행

      # 3-6) web2 빌드
      - name: Build web2
        run: npm run build
        working-directory: ./web2 # web2 폴더에서 실행

      # 3-7) 빌드 결과를 dist 폴더로 모으기
      - name: Collate build outputs
        run: |
          mkdir -p dist
          echo "Copying web1 build output..."
          ls -la web1/ # web1 폴더 내용 확인 (디버깅용, 실제로는 필요 없을 수 있음)
          if [ -d "web1/build" ]; then
            cp -r web1/build dist/web1
            echo "web1/build copied to dist/web1"
          elif [ -d "web1/dist" ]; then # 만약 빌드 결과가 'dist' 폴더에 있다면
            cp -r web1/dist dist/web1
            echo "web1/dist copied to dist/web1"
          else
            echo "Error: web1 build output directory (build or dist) not found!"
            exit 1
          fi

          echo "Copying web2 build output..."
          ls -la web2/ # web2 폴더 내용 확인 (디버깅용)
          if [ -d "web2/build" ]; then
            cp -r web2/build dist/web2
            echo "web2/build copied to dist/web2"
          elif [ -d "web2/dist" ]; then # 만약 빌드 결과가 'dist' 폴더에 있다면
            cp -r web2/dist dist/web2
            echo "web2/dist copied to dist/web2"
          else
            echo "Error: web2 build output directory (build or dist) not found!"
            exit 1
          fi
          echo "Final dist structure:"
          ls -la dist/
          ls -la dist/web1/
          ls -la dist/web2/

      # 3-8) Pages용 아티팩트 업로드 (최신 버전 @v3 사용)
      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  # 4) 배포 작업 (build 성공 후 실행)
  deploy:
    needs: build # build 작업이 성공해야 실행됩니다.
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 배포된 페이지 URL을 출력합니다.
    steps:
      # 4-1) 업로드된 아티팩트를 실제 Pages에 배포
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4